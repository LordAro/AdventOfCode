#include <algorithm>
#include <cmath>
#include <fstream>
#include <iostream>
#include <map>
#include <sstream>

// ultimately unused (except for debugging)
int64_t snafu_to_decimal(std::string snafu)
{
	int64_t decimal = 0;
	for (size_t i = 0; i < snafu.size(); i++) {
		int64_t n = 0;
		switch (snafu[i]) {
			case '2':
				n = 2;
				break;
			case '1':
				n = 1;
				break;
			case '0':
				n = 0;
				break;
			case '-':
				n = -1;
				break;
			case '=':
				n = -2;
				break;
			default:
				__builtin_unreachable();
		}
		decimal += n * std::pow(5, snafu.size() - i - 1);
	}
	return decimal;
}

// I'm sure there's a cleverer way of doing this, but it's christmas, so eh.
std::pair<char, char> snafu_add(char a, char b, char carry)
{
	static const std::map<int, std::pair<char, char>> convert{
		{-6, {'-', '-'} }, // digit, carry (backwards)
		{-5, {'0', '-'} },
		{-4, {'1', '-'} },
		{-3, {'2', '-'} },
		{-2, {'=', '0'} },
		{-1, {'-', '0'} },
		{ 0, {'0', '0'} },
		{ 1, {'1', '0'} },
		{ 2, {'2', '0'} },
		{ 3, {'=', '1'} },
		{ 4, {'-', '1'} },
		{ 5, {'0', '1'} },
		{ 6, {'1', '1'} },
	};
	static const std::map<std::tuple<char, char, char>, int> addition2 {
		{ { '=', '=', '='}, -6},  // -2 -2 -2
		{ { '=', '-', '='}, -5},  // -2 -1 -2
		{ { '=', '0', '='}, -4},  // -2  0 -2
		{ { '=', '1', '='}, -3},  // -2  1 -2
		{ { '=', '2', '='}, -2},  // -2  2 -2
		{ { '-', '=', '='}, -5},  // -1 -2 -2
		{ { '-', '-', '='}, -4},  // -1 -1 -2
		{ { '-', '0', '='}, -3},  // -1  0 -2
		{ { '-', '1', '='}, -2},  // -1  1 -2
		{ { '-', '2', '='}, -1},  // -1  2 -2
		{ { '0', '=', '='}, -4},  //  0 -2 -2
		{ { '0', '-', '='}, -3},  //  0 -1 -2
		{ { '0', '0', '='}, -2},  //  0  0 -2
		{ { '0', '1', '='}, -1},  //  0  1 -2
		{ { '0', '2', '='},  0},  //  0  2 -2
		{ { '1', '=', '='}, -3},  //  1 -2 -2
		{ { '1', '-', '='}, -2},  //  1 -1 -2
		{ { '1', '0', '='}, -1},  //  1  0 -2
		{ { '1', '1', '='},  0},  //  1  1 -2
		{ { '1', '2', '='},  1},  //  1  2 -2
		{ { '2', '=', '='}, -2},  //  2 -2 -2
		{ { '2', '-', '='}, -1},  //  2 -1 -2
		{ { '2', '0', '='},  0},  //  2  0 -2
		{ { '2', '1', '='},  1},  //  2  1 -2
		{ { '2', '2', '='},  2},  //  2  2 -2

		{ { '=', '=', '-'}, -5},  // -2 -2 -1
		{ { '=', '-', '-'}, -4},  // -2 -1 -1
		{ { '=', '0', '-'}, -3},  // -2  0 -1
		{ { '=', '1', '-'}, -2},  // -2  1 -1
		{ { '=', '2', '-'}, -1},  // -2  2 -1
		{ { '-', '=', '-'}, -4},  // -1 -2 -1
		{ { '-', '-', '-'}, -3},  // -1 -1 -1
		{ { '-', '0', '-'}, -2},  // -1  0 -1
		{ { '-', '1', '-'}, -1},  // -1  1 -1
		{ { '-', '2', '-'},  0},  // -1  2 -1
		{ { '0', '=', '-'}, -3},  //  0 -2 -1
		{ { '0', '-', '-'}, -2},  //  0 -1 -1
		{ { '0', '0', '-'}, -1},  //  0  0 -1
		{ { '0', '1', '-'},  0},  //  0  1 -1
		{ { '0', '2', '-'},  1},  //  0  2 -1
		{ { '1', '=', '-'}, -2},  //  1 -2 -1
		{ { '1', '-', '-'}, -1},  //  1 -1 -1
		{ { '1', '0', '-'},  0},  //  1  0 -1
		{ { '1', '1', '-'},  1},  //  1  1 -1
		{ { '1', '2', '-'},  2},  //  1  2 -1
		{ { '2', '=', '-'}, -1},  //  2 -2 -1
		{ { '2', '-', '-'},  0},  //  2 -1 -1
		{ { '2', '0', '-'},  1},  //  2  0 -1
		{ { '2', '1', '-'},  2},  //  2  1 -1
		{ { '2', '2', '-'},  3},  //  2  2 -1

		{ { '=', '=', '0'}, -4},  // -2 -2  0
		{ { '=', '-', '0'}, -3},  // -2 -1  0
		{ { '=', '0', '0'}, -2},  // -2  0  0
		{ { '=', '1', '0'}, -1},  // -2  1  0
		{ { '=', '2', '0'},  0},  // -2  2  0
		{ { '-', '=', '0'}, -3},  // -1 -2  0
		{ { '-', '-', '0'}, -2},  // -1 -1  0
		{ { '-', '0', '0'}, -1},  // -1  0  0
		{ { '-', '1', '0'},  0},  // -1  1  0
		{ { '-', '2', '0'},  1},  // -1  2  0
		{ { '0', '=', '0'}, -2},  //  0 -2  0
		{ { '0', '-', '0'}, -1},  //  0 -1  0
		{ { '0', '0', '0'},  0},  //  0  0  0
		{ { '0', '1', '0'},  1},  //  0  1  0
		{ { '0', '2', '0'},  2},  //  0  2  0
		{ { '1', '=', '0'}, -1},  //  1 -2  0
		{ { '1', '-', '0'},  0},  //  1 -1  0
		{ { '1', '0', '0'},  1},  //  1  0  0
		{ { '1', '1', '0'},  2},  //  1  1  0
		{ { '1', '2', '0'},  3},  //  1  2  0
		{ { '2', '=', '0'},  0},  //  2 -2  0
		{ { '2', '-', '0'},  1},  //  2 -1  0
		{ { '2', '0', '0'},  2},  //  2  0  0
		{ { '2', '1', '0'},  3},  //  2  1  0
		{ { '2', '2', '0'},  4},  //  2  2  0

		{ { '=', '=', '1'}, -3},  // -2 -2  1
		{ { '=', '-', '1'}, -2},  // -2 -1  1
		{ { '=', '0', '1'}, -1},  // -2  0  1
		{ { '=', '1', '1'},  0},  // -2  1  1
		{ { '=', '2', '1'},  1},  // -2  2  1
		{ { '-', '=', '1'}, -2},  // -1 -2  1
		{ { '-', '-', '1'}, -1},  // -1 -1  1
		{ { '-', '0', '1'},  0},  // -1  0  1
		{ { '-', '1', '1'},  1},  // -1  1  1
		{ { '-', '2', '1'},  2},  // -1  2  1
		{ { '0', '=', '1'}, -1},  //  0 -2  1
		{ { '0', '-', '1'},  0},  //  0 -1  1
		{ { '0', '0', '1'},  1},  //  0  0  1
		{ { '0', '1', '1'},  2},  //  0  1  1
		{ { '0', '2', '1'},  3},  //  0  2  1
		{ { '1', '=', '1'},  0},  //  1 -2  1
		{ { '1', '-', '1'},  1},  //  1 -1  1
		{ { '1', '0', '1'},  2},  //  1  0  1
		{ { '1', '1', '1'},  3},  //  1  1  1
		{ { '1', '2', '1'},  4},  //  1  2  1
		{ { '2', '=', '1'},  1},  //  2 -2  1
		{ { '2', '-', '1'},  2},  //  2 -1  1
		{ { '2', '0', '1'},  3},  //  2  0  1
		{ { '2', '1', '1'},  4},  //  2  1  1
		{ { '2', '2', '1'},  5},  //  2  2  1

		{ { '=', '=', '2'}, -2},  // -2 -2  2
		{ { '=', '-', '2'}, -1},  // -2 -1  2
		{ { '=', '0', '2'},  0},  // -2  0  2
		{ { '=', '1', '2'},  1},  // -2  1  2
		{ { '=', '2', '2'},  2},  // -2  2  2
		{ { '-', '=', '2'}, -1},  // -1 -2  2
		{ { '-', '-', '2'},  0},  // -1 -1  2
		{ { '-', '0', '2'},  1},  // -1  0  2
		{ { '-', '1', '2'},  2},  // -1  1  2
		{ { '-', '2', '2'},  3},  // -1  2  2
		{ { '0', '=', '2'},  0},  //  0 -2  2
		{ { '0', '-', '2'},  1},  //  0 -1  2
		{ { '0', '0', '2'},  2},  //  0  0  2
		{ { '0', '1', '2'},  3},  //  0  1  2
		{ { '0', '2', '2'},  4},  //  0  2  2
		{ { '1', '=', '2'},  1},  //  1 -2  2
		{ { '1', '-', '2'},  2},  //  1 -1  2
		{ { '1', '0', '2'},  3},  //  1  0  2
		{ { '1', '1', '2'},  4},  //  1  1  2
		{ { '1', '2', '2'},  5},  //  1  2  2
		{ { '2', '=', '2'},  2},  //  2 -2  2
		{ { '2', '-', '2'},  3},  //  2 -1  2
		{ { '2', '0', '2'},  4},  //  2  0  2
		{ { '2', '1', '2'},  5},  //  2  1  2
		{ { '2', '2', '2'},  6},  //  2  2  2
	};

	return convert.at(addition2.at({a, b, carry}));
}

std::string snafu_add(const std::string &a, const std::string &b)
{
	// pad.
	std::string a_ = a;
	std::string b_ = b;
	if (a.size() < b.size()) {
		a_ = std::string(b.size() - a.size(), '0') + a;
	}
	if (b.size() < a.size()) {
		b_ = std::string(a.size() - b.size(), '0') + b;
	}

	std::string result;

	char carry = '0';
	for (size_t i = 0; i < b_.size(); i++) {
		char a_char = *(a_.rbegin() + i);
		char b_char = *(b_.rbegin() + i);
		auto [digit, carry_] = snafu_add(a_char, b_char, carry);
		carry = std::move(carry_);

		result = digit + result;
	}
	result = carry + result;

	// trim off leading zeros
	auto idx = result.find_first_not_of("0");
	if (idx == std::string::npos) {
		return "0";
	} else {
		return result.substr(idx);
	}
}

int main(int argc, char **argv)
{
	if (argc != 2) {
		std::cerr << "Incorrect number of arguments provided\n";
		return 1;
	}
	std::fstream input(argv[1]);
	if (!input) {
		std::cerr << "Could not open input file\n";
		return 1;
	}

	std::string addition;
	for (std::string line; std::getline(input, line); ) {
		addition = snafu_add(addition, line);
	}
	std::cout << "SNAFU sum: " << addition << '\n';
}
